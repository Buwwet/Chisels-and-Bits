plugins {
    id 'fabric-loom'
    id 'com.matthewprenger.cursegradle'
}

project.addCoreProject()

project.dependencies.minecraft "com.mojang:minecraft:${project.minecraftVersion}"
project.dependencies.modImplementation "net.fabricmc:fabric-loader:${project.fabricLoaderVersion}"
project.dependencies.modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricVersion}+${project.minecraftVersion}"
project.dependencies.modImplementation "com.communi-suggestu.scena:scena-fabric:${project.scenaVersion}"
project.dependencies.modImplementation "com.communi-suggestu.saecularia-caudices:saecularia-caudices-fabric:${project.saeculariaCaudicesVersion}"
project.dependencies.implementation "org.lz4:lz4-pure-java:${project.lz4Version}"

project.dependencies.include "org.lz4:lz4-pure-java:${project.lz4Version}"

project.dependencies.include "com.communi-suggestu.scena:scena-fabric:${project.scenaVersion}"
project.dependencies.include "com.communi-suggestu.saecularia-caudices:saecularia-caudices-fabric:${project.saeculariaCaudicesVersion}"

project.dependencies.mappings loom.layered() { layer ->
    layer.officialMojangMappings()
    layer.parchment("org.parchmentmc.data:parchment-${project.parchmentMinecraftVersion}:${project.parchmentVersion}@zip")
}

project.loom.accessWidenerPath = project(':common').file("accesswidener.accesswidener")
project.tasks.processResources.from project(':common').file("accesswidener.accesswidener")
setupResourceProcessing(project.tasks.processResources)

project.remapJar.addNestedDependencies = true

project.loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("runs/client")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("runs/server")
        }
    }
}

if ((opc.hasPropertySet("curseApiKey") || opc.hasPropertySet("CURSEAPIKEY"))) {
    project.curseforge { cf ->
        cf.apiKey = opc.hasPropertySet("curseApiKey") ? opc.getProperty("curseApiKey") : opc.getProperty("CURSEAPIKEY")

        project { cp ->
            cp.id = "561059"
            cp.addGameVersion "Fabric"
            cp.addGameVersion "Java ${java.toolchain.languageVersion.get().asInt()}"
            cp.addGameVersion(project.minecraftVersion)
            cp.changelog = rootProject.file('build/changelog.md')
            cp.changelogType = 'markdown'
            cp.releaseType = 'release'

            opc.getStringListProperty("additionalMinecraftVersions").each { v ->
                cp.addGameVersion(v)
            }

            cp.mainArtifact(remapJar)

            afterEvaluate {
                uploadTask.dependsOn remapJar
            }

        }
        options {
            forgeGradleIntegration = false
        }
    }
}